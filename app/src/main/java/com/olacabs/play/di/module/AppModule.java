package com.olacabs.play.di.module;

import android.app.Application;
import android.arch.persistence.room.Room;
import android.content.Context;

import com.olacabs.play.di.DatabaseInfo;
import com.olacabs.play.di.PreferenceInfo;
import com.olacabs.play.repo.DataManager;
import com.olacabs.play.repo.IDataManager;
import com.olacabs.play.repo.api.IRestApiHelper;
import com.olacabs.play.repo.api.RestApiHelper;
import com.olacabs.play.repo.db.DBHelper;
import com.olacabs.play.repo.db.IDBHelper;
import com.olacabs.play.repo.db.db_utils.OlaPlayDatabase;
import com.olacabs.play.repo.dir.FileHelper;
import com.olacabs.play.repo.dir.IFileHelper;
import com.olacabs.play.repo.pref.IPreferenceHelper;
import com.olacabs.play.repo.pref.PreferenceHelper;
import com.olacabs.play.utils.Constants;
import com.olacabs.play.utils.rx.ISchedulerProvider;
import com.olacabs.play.utils.rx.SchedulerProvider;

import javax.inject.Singleton;

import dagger.Module;
import dagger.Provides;

/**
 * Generated by Dipendra on 16/12/17
 */

@Module
public class AppModule {

    @Provides
    @Singleton
    Context provideContext(Application application) {
        return application;
    }

    @Provides
    ISchedulerProvider provideSchedulerProvider() {
        return new SchedulerProvider();
    }

    @Provides
    @DatabaseInfo
    String provideDatabaseName() {
        return Constants.DB_NAME;
    }

    @Provides
    @PreferenceInfo
    String providePreferenceName() {
        return Constants.PREF_NAME;
    }

    @Provides
    @Singleton
    IDataManager provideDataManager(DataManager dataHelper) {
        return dataHelper;
    }

    @Provides
    @Singleton
    OlaPlayDatabase provideAppDatabase(@DatabaseInfo String dbName, Context context) {
        return Room.databaseBuilder(context, OlaPlayDatabase.class, dbName).build();
    }

    @Provides
    @Singleton
    IDBHelper provideDatabaseHelper(DBHelper databaseHelper) {
        return databaseHelper;
    }

    @Provides
    @Singleton
    IFileHelper provideFileHelper(FileHelper fileHelper) {
        return fileHelper;
    }

    @Provides
    @Singleton
    IPreferenceHelper providePreferenceHelper(PreferenceHelper preferenceHelper) {
        return preferenceHelper;
    }

    @Provides
    @Singleton
    IRestApiHelper provideRestApiHelper(RestApiHelper restApiHelper) {
        return restApiHelper;
    }

}